name: esim
base: core22
adopt-info: esim
version: '0.1' # just for humans, typically '1.2+git' or '1.3.2'
grade: stable # must be 'stable' to release into candidate/stable channels
confinement: strict # use 'strict' once you have the right plugs and slots
summary: Electronic schematic and PCB design software
description: |
  Kicad is a suite of programs for the creation of printed circuit boards.
  It includes a schematic editor, a PCB layout tool, support tools and a
  3D viewer to display a finished & fully populated PCB.
  .
  Kicad is made up of 5 main components:
  .
   * kicad - project manager
   * eeschema - schematic editor
   * pcbnew - PCB editor
   * gerbview - GERBER viewer
   * cvpcb - footprint selector for components
  .
  Libraries:
   * Both eeschema and pcbnew have library managers and editors for their
     components and footprints
   * You can easily create, edit, delete and exchange library items
   * Documentation files can be associated with components, footprints and key
     words, allowing a fast search by function
   * Very large libraries are available for schematic components and footprints
   * Most components have corresponding 3D models

layout:
  /usr/share/kicad:
    bind: $SNAP/usr/share/kicad

apps:
################################## Kicad #####################################
  kicad:
    command: usr/bin/launcher.sh $SNAP/usr/bin/kicad
    extensions: [gnome]
    environment: &kicad_env
      GDK_BACKEND: x11
      LD_LIBRARY_PATH: $SNAP/gnome-platform/usr/lib/$CRAFT_ARCH_TRIPLET:$SNAP/gnome-platform/usr/lib:${LD_LIBRARY_PATH:+$LD_LIBRARY_PATH:}$SNAP/usr/lib/$CRAFT_ARCH_TRIPLET:$SNAP/usr/lib
      PYTHONPATH: $SNAP/usr/local/lib/python3.10/dist-packages${PYTHONPATH:+:$PYTHONPATH}
    desktop: usr/share/applications/org.kicad.kicad.desktop
    plugs: &kicad_plugs
      - home
      - network
      - removable-media
      - opengl
      - network-bind
      - desktop
      - desktop-legacy
      - x11
      - wayland
      
  kicad-cli:
    command: usr/bin/launcher.sh $SNAP/usr/bin/kicad-cli
    extensions: [gnome]
    environment: *kicad_env
    plugs: *kicad_plugs

  eeschema:
    command: usr/bin/launcher.sh $SNAP/usr/bin/eeschema
    extensions: [gnome]
    environment: *kicad_env
    desktop: usr/share/applications/org.kicad.eeschema.desktop
    plugs: *kicad_plugs

  gerbview:
    command: usr/bin/launcher.sh $SNAP/usr/bin/gerbview
    extensions: [gnome]
    environment: *kicad_env
    desktop: usr/share/applications/org.kicad.gerbview.desktop
    plugs: *kicad_plugs

  bitmap2component:
    command: usr/bin/launcher.sh $SNAP/usr/bin/bitmap2component
    extensions: [gnome]
    environment: *kicad_env
    desktop: usr/share/applications/org.kicad.bitmap2component.desktop
    plugs: *kicad_plugs

  pcbcalculator:
    command: usr/bin/launcher.sh $SNAP/usr/bin/pcb_calculator
    extensions: [gnome]
    environment: *kicad_env
    desktop: usr/share/applications/org.kicad.pcbcalculator.desktop
    plugs: *kicad_plugs

  pcbnew:
    command: usr/bin/launcher.sh $SNAP/usr/bin/pcbnew
    extensions: [gnome]
    environment: *kicad_env
    desktop: usr/share/applications/org.kicad.pcbnew.desktop
    plugs: *kicad_plugs


################################# eSIm #####################################
  esim:
    command: usr/bin/launcher-esim.sh
    extensions: [gnome]
    environment:
      QT_QPA_PLATFORM: wayland
      QT_PLUGIN_PATH: $SNAP/lib/python3.10/site-packages/PyQt5/Qt5/plugins
      QT_QPA_PLATFORM_PLUGIN_PATH: $SNAP/lib/python3.10/site-packages/PyQt5/Qt5/plugins/platforms
      LD_LIBRARY_PATH: $SNAP/lib/python3.10/site-packages/PyQt5/Qt5/lib:$SNAP/kf5/usr/lib/x86_64-linux-gnu:$SNAP/gnome-platform/usr/lib/$CRAFT_ARCH_TRIPLET:$SNAP/gnome-platform/usr/lib:$SNAP/usr/lib/$CRAFT_ARCH_TRIPLET:$SNAP/usr/lib${LD_LIBRARY_PATH:+:$LD_LIBRARY_PATH}
      PYTHONPATH: $SNAP/usr/lib/python3/dist-packages:$SNAP/lib/python3.10/site-packages:$SNAP/usr/local/lib/python3.10/dist-packages${PYTHONPATH:+:$PYTHONPATH}
      PERL5LIB: $SNAP/usr/share/perl5:$SNAP/usr/lib/x86_64-linux-gnu/perl/5.34:$SNAP/usr/share/perl/5.34:$SNAP/usr/lib/x86_64-linux-gnu/perl-base
      GDK_BACKEND: x11
    plugs:
      - home
      - network-bind
      - desktop
      - desktop-legacy
      - x11
      - wayland
      - opengl
      - browser-support
      - removable-media

parts:
################################## Kicad #####################################
  snapbuildtools:
    source: https://github.com/sergio-costas/snap-build-tools.git
    source-depth: 1
    plugin: nil
    override-pull: |
      craftctl default
      $CRAFT_PART_SRC/install

  wxwidgets:
    after: [snapbuildtools]
    source: https://github.com/wxWidgets/wxWidgets.git
    plugin: nil
    source-tag: 'v3.2.7'
    override-build: |
      cp -p /usr/share/automake-*/config.{sub,guess} .
      autoconf -f -B build/autoconf_prepend-include
      ./configure --with-opengl --enable-glcanvasegl --prefix=/usr
      make -j$(nproc)
      make install
      make install DESTDIR=$CRAFT_PART_INSTALL
    build-packages:
      - automake
    prime:
      - -usr/bin/wx-config

  wxpython:
    after: [wxwidgets]
    plugin: nil
    build-environment:
      - LD_LIBRARY_PATH: /snap/gnome-42-2204-sdk/current/usr/lib/$CRAFT_ARCH_TRIPLET${LD_LIBRARY_PATH:+:$LD_LIBRARY_PATH}
      - WXPYTHON_BUILD_ARGS: --use_syswx --nodoc
    override-build: |
      python3 -m pip install --upgrade pip
      python3 -m pip install --upgrade --force-reinstall --no-cache-dir setuptools==58.2.0
      python3 -m pip install --upgrade --force-reinstall --no-cache-dir wheel==0.42.0
      python3 -c "import wheel.bdist_wheel; print('bdist_wheel module found')"
      export PYTHONPATH=${CRAFT_PART_INSTALL}/usr/lib/python3.10/site-packages
      python3 -m pip install --verbose --prefix=${CRAFT_PART_INSTALL}/usr wxpython

  kicad:
    after: [wxpython]
    source: https://gitlab.com/kicad/code/kicad/-/archive/6.0.0/kicad-6.0.0.tar.gz
# change this to the specific tag that you want to build,
# or to 'master' to build the development version (it is reused for templates,
# footprints, packages3d and symbols repositories).
# But check the GDK_BACKEND environment variable if you build 'master'.
    plugin: cmake
    cmake-generator: Ninja
    cmake-parameters:
      - -DCMAKE_INSTALL_PREFIX=/usr
      - -DCAIRO_INCLUDE_DIR=/snap/gnome-42-2204-sdk/current/usr/include/cairo
      - -DPIXMAN_INCLUDE_DIR=/snap/gnome-42-2204-sdk/current/usr/include/pixman-1
      - -DFontconfig_INCLUDE_DIRS=/snap/gnome-42-2204-sdk/current/usr/include
      - -DwxWidgets_INCLUDE_DIRS=$CRAFT_STAGE/usr/include/wx-3.2
      - -DKICAD_SCRIPTING_WXPYTHON=ON
      - -DCMAKE_BUILD_TYPE=RelWithDebInfo
      - -DKICAD_BUILD_QA_TESTS=OFF
      - -DKICAD_BUILD_I18N=ON
      - -DKICAD_USE_EGL=ON
    override-pull: |
      craftctl default
      # craftctl set version="6.0.0"
    build-snaps: [core22, gtk-common-themes, gnome-42-2204]
    override-build: |
      $CRAFT_PROJECT_DIR/snapbuildtools/remove_common.py core22 gtk-common-themes gnome-42-2204
      craftctl default
    override-stage: |
      mkdir -p $CRAFT_PART_INSTALL/meta/gui/
      for NAME in kicad eeschema gerbview bitmap2component pcbcalculator pcbnew; do
        sed -i "s|Icon=${NAME}|Icon=\${SNAP}/meta/gui/${NAME}.svg|g" $CRAFT_PART_INSTALL/usr/share/applications/org.kicad.${NAME}.desktop
        cp $CRAFT_PART_INSTALL/usr/share/icons/hicolor/scalable/apps/${NAME}.svg $CRAFT_PART_INSTALL/meta/gui/
      done
      craftctl default
    build-environment:
      - PKG_CONFIG_PATH: $CRAFT_STAGE/usr/lib/pkg${PKG_CONFIG_PATH:+:$PKG_CONFIG_PATH}
      - LD_LIBRARY_PATH: /snap/gnome-42-2204-sdk/current/usr/lib/$CRAFT_ARCH_TRIPLET${LD_LIBRARY_PATH:+:$LD_LIBRARY_PATH}
      - LDFLAGS: -L/snap/gnome-42-2204-sdk/current/usr/lib/$CRAFT_ARCH_TRIPLET
      - PYTHONPATH: $CRAFT_STAGE/usr/local/lib/python3.10/dist-packages${PYTHONPATH:+:$PYTHONPATH}
    build-packages:
      - libgit2-dev
      - glew-utils
      - libopengl-dev
      - libglx-dev
      - mesa-common-dev
      - libglew-dev
      - libglm-dev
      - zlib1g-dev
      - libgle3-dev
      - libgles2-mesa-dev
      - libgles-dev
      - libboost-dev
      - libboost-locale-dev
      - libboost-test-dev
      - libfreetype-dev
      - libngspice0-dev
      - libocct-ocaf-dev
      - libocct-data-exchange-dev
      - swig4.0
      - libpython3-dev
      - python3-setuptools
      - python3-pip
      - unixodbc-dev
      - libboost-dev
      - libboost-locale-dev
      - libboost-test-dev
      - libboost-filesystem-dev
      - libboost-system-dev
      - libboost-thread-dev
      - libboost-program-options-dev
    stage-packages:
      - libgit2-1.1
      - libodbc2
      - unixodbc
      - libglew2.2
      - libfreeimage3
      - libopengl0
      - libgle3
      - libgles2
      - libgles2-mesa
      - libglx0
      - libglew2.2
      - libraw20
      - libtbb2
      - libocct-modeling-algorithms-7.5
      - libocct-foundation-7.5
      - libocct-data-exchange-7.5
      - libocct-ocaf-7.5

  templates:
    after: [kicad]
    source: https://gitlab.com/kicad/libraries/kicad-templates/-/archive/6.0.0/kicad-templates-6.0.0.tar.gz
    plugin: cmake
    cmake-parameters:
      - -DCMAKE_INSTALL_PREFIX=/usr

  footprints:
    after: [kicad]
    source: https://gitlab.com/kicad/libraries/kicad-footprints/-/archive/6.0.0/kicad-footprints-6.0.0.tar.gz
    plugin: cmake
    cmake-parameters:
      - -DCMAKE_INSTALL_PREFIX=/usr

  packages3d:
    after: [kicad]
    source: https://gitlab.com/kicad/libraries/kicad-packages3D/-/archive/6.0.0/kicad-packages3D-6.0.0.tar.gz
    plugin: cmake
    cmake-parameters:
      - -DCMAKE_INSTALL_PREFIX=/usr

  symbols:
    after: [kicad]
    source: https://gitlab.com/kicad/libraries/kicad-symbols/-/archive/6.0.0/kicad-symbols-6.0.0.tar.gz
    plugin: cmake
    cmake-parameters:
      - -DCMAKE_INSTALL_PREFIX=/usr
    override-build: |
      craftctl default
      rm $CRAFT_PART_INSTALL/usr/share/kicad/template/sym-lib-table 
  scripts:
    plugin: nil
    source: scripts
    override-build: |
      mkdir -p $CRAFT_PART_INSTALL/usr/bin/
      cp $CRAFT_PART_SRC/launcher.sh $CRAFT_PART_INSTALL/usr/bin/launcher.sh
      craftctl default

########################## eSim  #####################################
  # copyKicadLibrary
  eSim-library:
   after: [symbols]
   source: .
   plugin: nil
   override-build: |
     mkdir -p $CRAFT_PART_INSTALL/usr/share/kicad/symbols
     mkdir -p $CRAFT_PART_INSTALL/usr/share/kicad/template
     cp -r library/kicadLibrary/eSim-symbols/* $CRAFT_PART_INSTALL/usr/share/kicad/symbols/
     cp    library/kicadLibrary/template/sym-lib-table $CRAFT_PART_INSTALL/usr/share/kicad/template/    

  py-modules:
    after: [kicad]
    plugin: python
    source: .
    python-requirements : ['requirements.txt']

  esim:
    after: [kicad]
    plugin: nil
    source: .
    override-build: |
      mkdir -p $CRAFT_PART_INSTALL/eSim
      sed -i '1i #!/usr/bin/env python3' $SNAPCRAFT_PART_SRC/src/frontEnd/Application.py 
      chmod 755 $SNAPCRAFT_PART_SRC/src/frontEnd/Application.py
      cp -r $SNAPCRAFT_PART_SRC/code $CRAFT_PART_INSTALL/eSim/
      cp -r $SNAPCRAFT_PART_SRC/Examples $CRAFT_PART_INSTALL/eSim/
      cp -r $SNAPCRAFT_PART_SRC/images $CRAFT_PART_INSTALL/eSim/
      cp -r $SNAPCRAFT_PART_SRC/library $CRAFT_PART_INSTALL/eSim/
      cp -r $SNAPCRAFT_PART_SRC/src $CRAFT_PART_INSTALL/eSim/
      cp $SNAPCRAFT_PART_SRC/conf.py $CRAFT_PART_INSTALL/eSim/
      cp $SNAPCRAFT_PART_SRC/index.rst $CRAFT_PART_INSTALL/eSim/
      cp $SNAPCRAFT_PART_SRC/setup.py $CRAFT_PART_INSTALL/eSim/
      #  install sky130
      cd $SNAPCRAFT_PART_SRC/library
      tar xvf sky130_fd_pr.tar.xz
      mkdir -p $CRAFT_PART_INSTALL/usr/share/local/
      mv sky130_fd_pr $CRAFT_PART_INSTALL/usr/share/local/sky130_fd_pr/
    stage-packages:
      - libvulkan1
      - libqt5gui5
      - libqt5core5a
      - libqt5dbus5
      - libqt5widgets5
      - libqt5network5
      - libqt5svg5
      - libxcb1
      - libxcb-shape0
      - libxcb-xinerama0
      - libxcb-render-util0
      - libx11-xcb1
      - libxkbcommon0
      - libxext6
      - libxrender1
      - libxfixes3
      - libxcb-icccm4
      - libxcb-image0
      - libxcb-keysyms1
      - libxcb-randr0
      - libxcb-render0
      - libxcb-shm0
      - libxcb-sync1
      - libxcb-util1
      - libxcb-xfixes0
      - libxcb-xkb1
      - libfontconfig1
      - libfreetype6
      - libglib2.0-0
      - libdbus-1-3
      - libxss1
      - libgconf-2-4
      - libasound2
  
      
  configure-esim:
    after: [kicad]
    plugin: nil
    source: .
    override-build: |
      # launcher scripts
      mkdir -p $CRAFT_PART_INSTALL/usr/bin/
      cp $CRAFT_PROJECT_DIR/scripts/launcher-esim.sh          $CRAFT_PART_INSTALL/usr/bin/launcher-esim.sh
      cp $CRAFT_PROJECT_DIR/scripts/setup-esim.sh          $CRAFT_PART_INSTALL/usr/bin/setup-esim.sh
      chmod 755 $CRAFT_PART_INSTALL/usr/bin/setup-esim.sh
      chmod 755 $CRAFT_PART_INSTALL/usr/bin/launcher-esim.sh
     
  # Configuration for Nghdl
  # Build and install Ghdl
  ghdl:
    source : https://github.com/ghdl/ghdl/archive/refs/tags/v4.1.0.tar.gz
    plugin: autotools
    build-packages :
      - gnat
    stage-packages:
      - libgnat-10

  # Build and install  verilator
  verilator:
    source: https://github.com/verilator/verilator/archive/refs/tags/v5.036.tar.gz
    plugin: cmake
    stage-packages:
      - perl
      - perl-base
      - perl-modules-5.34
      - libperl5.34
    build-packages:
      - cmake
      - g++
      - flex
      - bison
      - perl
      - perl-base
      - perl-modules-5.34
      - python3
      - libfl2
      - libfl-dev
      - zlib1g
      - zlib1g-dev
      - help2man

  # build and install nghdl-simulator
  nghdl-simulator:
    source: https://github.com/FOSSEE/nghdl.git
    plugin : make
    build-packages:
      - libxft-dev
      - libfreetype6-dev
    override-build: |
      tar xvf nghdl-simulator-source.tar.xz
      cd nghdl-simulator-source/
      mkdir -p $CRAFT_PART_INSTALL/usr/bin/
      mkdir -p $CRAFT_PART_INSTALL/nghdl-simulator
      cp -r examples $CRAFT_PART_INSTALL/nghdl-simulator/
      cp -r src $CRAFT_PART_INSTALL/nghdl-simulator/
      cp  $SNAPCRAFT_PART_SRC/LICENSE $CRAFT_PART_INSTALL/nghdl-simulator/
      ./configure --enable-xspice --disable-debug  --prefix=$CRAFT_PART_INSTALL/usr --exec-prefix=$CRAFT_PART_INSTALL/usr
      make
      make install

  # nghdl  main part
  nghdl:
    after: [kicad]
    plugin: nil
    source: https://github.com/FOSSEE/nghdl.git
    override-pull: |
      craftctl default
      git apply $CRAFT_PROJECT_DIR/patches/0001-src-ngspice-ghdl-Use-non-native-file-browser.patch
    override-build: |
      mkdir -p $CRAFT_PART_INSTALL/nghdl
      cp -r $CRAFT_PART_SRC/src $CRAFT_PART_INSTALL/nghdl/
      cp -r $CRAFT_PART_SRC/Example $CRAFT_PART_INSTALL/nghdl/
      chmod 755 $CRAFT_PART_INSTALL/nghdl/src/ngspice_ghdl.py
      mkdir -p $CRAFT_PART_INSTALL/usr/bin
      cp $CRAFT_PROJECT_DIR/scripts/nghdl.sh $CRAFT_PART_INSTALL/usr/bin/nghdl
      chmod +x $CRAFT_PART_INSTALL/usr/bin/nghdl
    build-packages: 
      - linux-libc-dev
      - libc6-dev
      - libxaw7
      - libxaw7-dev
      - libxt-dev       # Needed for Xaw
      - libx11-dev       # X base libraries
      - libxext-dev      # Often required with X11
      - libsm-dev        # Optional, but sometimes needed
      - libice-dev       # Optional, but common
    stage-packages:
      - libxaw7
      - libxmu6
      - libxpm4
      - libvulkan1
      - libqt5gui5
      - libqt5core5a
      - libqt5dbus5
      - libqt5widgets5
      - libqt5network5
      - libqt5svg5
      - libxcb1
      - libxcb-shape0
      - libxcb-xinerama0
      - libxcb-render-util0
      - libx11-xcb1
      - libxkbcommon0
      - libxext6
      - libxrender1
      - libxfixes3
      - libxcb-icccm4
      - libxcb-image0
      - libxcb-keysyms1
      - libxcb-randr0
      - libxcb-render0
      - libxcb-shm0
      - libxcb-sync1
      - libxcb-util1
      - libxcb-xfixes0
      - libxcb-xkb1
      - libfontconfig1
      - libfreetype6
      - libglib2.0-0
      - libdbus-1-3
      - libxss1
      - libgconf-2-4
      - libasound2

